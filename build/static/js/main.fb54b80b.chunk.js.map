{"version":3,"sources":["components/Section/images sync nonrecursive /.(png|jpe?g|svg)$","components/Section/images/Alfonse.png","components/Section/images/Alm Saint-King.png","components/Section/images/Alm.png","components/Section/images/Amelia.png","components/Section/images/Anna.png","components/Section/images/Arvis.png","components/Section/images/Azura Performing Arts.png","components/Section/images/Bartre.png","components/Section/images/Celica Fallen Heroes.png","components/Section/images/Ike Brave Heroes.png","components/Section/images/Lucina Brave Heroes.png","components/Section/images/Takumi Fallen Heroes.png","components/Header/Header.js","components/Section/Images.js","components/Section/ImageDiv/ImageDiv.js","components/Section/Section.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Header","guessResult","curScore","topScore","className","r","Images","require","img","src","Image","onClick","alt","Section","handleGuess","shuffledImages","array","i","length","j","Math","floor","random","temp","shuffleArray","key","Footer","props","App","state","clicked","event","a","clickedImg","target","console","log","indexOf","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb54b80b.chunk.js","sourcesContent":["var map = {\n\t\"./Alfonse.png\": 20,\n\t\"./Alm Saint-King.png\": 21,\n\t\"./Alm.png\": 22,\n\t\"./Amelia.png\": 23,\n\t\"./Anna.png\": 24,\n\t\"./Arvis.png\": 25,\n\t\"./Azura Performing Arts.png\": 26,\n\t\"./Bartre.png\": 27,\n\t\"./Celica Fallen Heroes.png\": 28,\n\t\"./Ike Brave Heroes.png\": 29,\n\t\"./Lucina Brave Heroes.png\": 30,\n\t\"./Takumi Fallen Heroes.png\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19;","module.exports = __webpack_public_path__ + \"static/media/Alfonse.950b1c35.png\";","module.exports = __webpack_public_path__ + \"static/media/Alm Saint-King.d2deb780.png\";","module.exports = __webpack_public_path__ + \"static/media/Alm.d34e7378.png\";","module.exports = __webpack_public_path__ + \"static/media/Amelia.916b4dd9.png\";","module.exports = __webpack_public_path__ + \"static/media/Anna.3cef0e13.png\";","module.exports = __webpack_public_path__ + \"static/media/Arvis.343770db.png\";","module.exports = __webpack_public_path__ + \"static/media/Azura Performing Arts.322f8b9d.png\";","module.exports = __webpack_public_path__ + \"static/media/Bartre.0042cb51.png\";","module.exports = __webpack_public_path__ + \"static/media/Celica Fallen Heroes.0c4378a0.png\";","module.exports = __webpack_public_path__ + \"static/media/Ike Brave Heroes.1f4841e4.png\";","module.exports = __webpack_public_path__ + \"static/media/Lucina Brave Heroes.62148529.png\";","module.exports = __webpack_public_path__ + \"static/media/Takumi Fallen Heroes.6bb5fd4e.png\";","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header({ guessResult, curScore, topScore }) {\r\n    return (\r\n        <header className=\"Header\">\r\n            <div className=\"Header-size\">\r\n                <h1 className=\"Header-text\">\r\n                    Click Master\r\n                </h1>\r\n                <h2>\r\n                    {guessResult ? 'You guessed ' : 'Click an image to start guessing'}\r\n\r\n                    <span className={\"Header-\" + guessResult}>\r\n                        {guessResult ? guessResult + 'ly' : guessResult}\r\n                    </span>\r\n                </h2>\r\n                <h2 className=\"Header-score\">\r\n                    Current score: {curScore} | Top score: {topScore}\r\n                </h2>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","function importAll(r) {\r\n    return r.keys().map(r);\r\n}\r\n\r\nlet Images = importAll(require.context('./images', false, /\\.(png|jpe?g|svg)$/));\r\n\r\nImages = Images.map((img, id) => {\r\n    return {\r\n        src: img,\r\n        id: id\r\n    };\r\n});\r\n\r\nexport default Images;\r\n","import React from 'react';\r\nimport './ImageDiv.css';\r\n\r\nfunction Image({ id, src, onClick }) {\r\n    return (\r\n        <div className=\"Image-div\" id={id} onClick={onClick}>\r\n            <img className=\"Image-size\" src={src} alt=\"\" id={id} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Image;\r\n","import React from 'react';\r\nimport Images from './Images';\r\nimport ImageDiv from './ImageDiv/ImageDiv'\r\nimport './Section.css';\r\n\r\nfunction shuffleArray(array) {\r\n  let i = array.length - 1;\r\n  for (; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction Section({ handleGuess }) {\r\n  const shuffledImages = shuffleArray(Images);\r\n\r\n  return (\r\n    <section className=\"Section\">\r\n      {\r\n        shuffledImages.map((img, key) => {\r\n          return (\r\n            <ImageDiv id={img.id} src={img.src} onClick={handleGuess} key={key}></ImageDiv>\r\n          );\r\n        })\r\n      }\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <footer className=\"Footer\"></footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport Section from './components/Section/Section';\nimport Footer from './components/Footer/Footer';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    guessResult: '',\n    curScore: 0,\n    topScore: 0,\n    clicked: []\n  }\n\n  handleGuess = async event => {\n    const clickedImg = event.target;\n\n    console.log(clickedImg.id);\n\n    if (this.state.clicked.indexOf(clickedImg.id) !== -1) {\n      await this.setState({ // it appears setState is async\n        guessResult: 'incorrect',\n        curScore: 0,\n        clicked: []\n      })\n    }\n    else {\n      await this.setState({\n        guessResult: 'correct',\n        curScore: this.state.curScore + 1,\n        clicked: [...this.state.clicked, clickedImg.id]\n      })\n    }\n\n    if (this.state.topScore < this.state.curScore) {\n      await this.setState({ topScore: this.state.curScore })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header guessResult={this.state.guessResult} curScore={this.state.curScore} topScore={this.state.topScore}></Header>\n        <Section handleGuess={this.handleGuess}></Section>\n        <Footer></Footer>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}